[sp.slide-title{ lopdfの話 }]
[sp.event-title{ Rust LT #2 〜いま使う！Rust〜 }]
section.page.first-page {
h1: lopdfの話
h2: 2018-08-01 Rust LT #2 〜いま使う！Rust〜
h3: 小嶋智
}

# 自己紹介

* プログラマ
* RubyやC++を書きます
* テキスト処理や電子出版の周辺を漂っています
* Rust歴3ヶ月程度

image.fig-20(img/profile.png, プロフィール画像): 

#(t) 話す内容

##(p)  lopdf
* PDFライブラリ
* 製品で使った話をします

#(t) 背景 

##(t) 対象の製品

section.page {
h3.invisible: VeraType by Trim-marks

image.fig-80(img/versatype.png, VersaType説明): [l(https://trim-marks.com/){https://trim-marks.com/}]

}

###(p) VersaType

* HTML/CSSをページ組版するエンジン
** JS製

###(p) VersaType Converter

* HTML/CSSをPDFに変換
* jsエンジン + 組み込み用Chromium
* Win/Linux/macOSのバイナリ

##(p) なぜPDF処理(1) 

* PDF生成はChromium任せ
* PDF出力をもっと強くしたい
* 後処理 vs Chromiumへのパッチ
** 向き不向きがある

##(p) なぜPDF処理(2) 

* Chromiumへのパッチ vs 後処理
** 本家に取り込まれない場合は追従がしんどい
* 後処理でできることは後処理で

#(t) PDF後処理: 要件

##(t) 組み込んで配布
##(t) PDF細かく触れる
##(t) Win/Linux/macOS
##(t) C++から呼びたい
##(t) C++ 書きたくない
p.center: (できれば)

# lopdf

* バイナリに組み込める。または簡単に一緒に配布できる
* PDFの低レイヤが触れる
* Linux/Windows/macOSのx86_64
* C++から呼べる
* Rustで書ける

#(t) 懸念
section.page.no-h {
* PDF操作の機能が本当に足りているか
* C++からの呼び出し
** そこそこ複雑な構造を渡すインタフェース
* ちゃんとRustのコードが書けるのか (私が）
}

#(t) 機能が足りているか
section.page.no-h {
* 結論から言うと、足りている。
* ただし低レイヤなのでコード量は多い
* 抽象度の高いRubyのPrawnとコードを比較してみる。
}

##(p) 機能比較(1)

* Hello World

###(p) Prawn

```ruby
require 'prawn'

Prawn::Document.generate('hello.pdf') do
  text "Hello World!"
end
```

###(p) lopdf

section.small-small-code {
```rust
fn hello() {
    let mut doc = Document::with_version("1.5");
    let pages_id = doc.new_object_id();
    let font_id = doc.add_object(dictionary! {
        "Type" => "Font",
        "Subtype" => "Type1",
        "BaseFont" => "Courier",
    });
    let resources_id = doc.add_object(dictionary! {
        "Font" => dictionary! {
            "F1" => font_id,
        },
    });
    let content = Content {
        operations: vec![
            Operation::new("BT", vec![]),
            Operation::new("Tf", vec!["F1".into(), 48.into()]),
            Operation::new("Td", vec![100.into(), 600.into()]),
            Operation::new("Tj", vec![Object::string_literal("Hello World!")]),
            Operation::new("ET", vec![]),
        ],
    };
    let content_id = doc.add_object(Stream::new(dictionary! {}, content.encode().unwrap()));
    let page_id = doc.add_object(dictionary! {
        "Type" => "Page",
        "Parent" => pages_id,
        "Contents" => content_id,
    });
    let pages = dictionary! {
        "Type" => "Pages",
        "Kids" => vec![page_id.into()],
        "Count" => 1,
        "Resources" => resources_id,
        "MediaBox" => vec![0.into(), 0.into(), 595.into(), 842.into()],
    };
    doc.objects.insert(pages_id, Object::Dictionary(pages));
    let catalog_id = doc.add_object(dictionary! {
        "Type" => "Catalog",
        "Pages" => pages_id,
    });
    doc.trailer.set("Root", catalog_id);
    doc.compress();
    doc.save("hello-lopdf.pdf").unwrap();
}
```
}

###(t) 位置やフォント

###(p) Prawn : 位置とフォントを指定

```ruby
require 'prawn'

Prawn::Document.generate('hello2.pdf') do
  font("Courier") do
    font_size 48
    draw_text "Hello World!", :at => [100,600]
  end
end
```
##(p) 機能比較(2)

* Outlines (PDFしおり)

###(p) Prawn

section.small-code {
```ruby
require 'prawn'
Prawn::Document.generate('outline.pdf') do
  (1..10).each do |index|
    text "Page #{index}"
    start_new_page
  end

  outline.define do
    section('Section 1', destination: 1) do
      page title: 'Page 2', destination: 2
      page title: 'Page 3', destination: 3
    end
  end

  outline.insert_section_after('Page 2') do
    outline.section('Section after Page 2') do
      outline.page title: 'Page 4', destination: 4
    end
  end

  outline.insert_section_after('Section 1') do
    outline.section('Section after Section 1') do
      outline.page title: 'Page 5', destination: 5
    end
  end

  outline.insert_section_after('Page 3') do
    outline.page title: 'Page after Page 3', destination: 6
  end
end
```
}
###(p) lopdf

##(t) C++から呼び出し
section.page.no-h {
* PDFしおり
** ラベル、階層、ページ番号
*** の配列
}

###(t) 手段１
section.page.no-h {
* 新規Vectorへのポインタを返すAPI
* Vectorとデータの組みを渡して、Vectorに追加していくAPI
* VectorとPDFへのファイルパスを渡して、書き込むAPI
}

###(t) 手段1の実現
section.page.no-h {
* 元々はJSで、オブジェクトの配列
* C++のデータ構造にまず変換
* C++上でさらにRustで実装したAPIを呼びだす
}

###(t) だるい

###(p) 手段1の欠点

* C++コード上で構造を作る必要がある
** 中間に入るC++のコードでは、本来構造を知らなくても良い

###(t) 手段2
section.page.no-h {
* JSONを使う
** JS側でJSON文字列に変換
** C++ではその文字列をそのままRustで書いたAPIへ
** Rust側ではJSONをパースしてVectorを作る
}

##(t) 今回は手段2を採用

#(t) デモ


